from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

class DailySurveyStates(StatesGroup):
    waiting_for_weight = State()
    waiting_for_fat = State()
    waiting_for_workout = State()
    waiting_for_diet = State()

async def start_daily_survey(message: types.Message):
    await message.answer(
        "–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è! üìù\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥):"
    )
    await DailySurveyStates.waiting_for_weight.set()

async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text)
        async with state.proxy() as data:
            data['weight'] = weight
        
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ (–µ—Å–ª–∏ –∏–∑–º–µ—Ä—è–ª–∏):\n–ï—Å–ª–∏ –Ω–µ –∏–∑–º–µ—Ä—è–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'")
        await DailySurveyStates.waiting_for_fat.set()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!") 